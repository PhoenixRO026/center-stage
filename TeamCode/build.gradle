//
// build.gradle in TeamCode
//
// Most of the definitions for building your module reside in a common, shared
// file 'build.common.gradle'. Being factored in this way makes it easier to
// integrate updates to the FTC into your code. If you really need to customize
// the build definitions, you can place those customizations in this file, but
// please think carefully as to whether such customizations are really necessary
// before doing so.


// Custom definitions may go here
///*
//package org.firstinspires.ftc.teamcode.sensor
//
//import com.ThermalEquilibrium.homeostasis.Filters.FilterAlgorithms.KalmanFilter
//import com.acmerobotics.dashboard.config.Config
//import com.qualcomm.hardware.rev.Rev2mDistanceSensor
//import org.firstinspires.ftc.robotcore.external.navigation.DistanceUnit
//import org.firstinspires.ftc.teamcode.units.Distance
//import org.firstinspires.ftc.teamcode.units.mm
//
//class KalmanDistanceSensor(private val sensor: Rev2mDistanceSensor) {
//    @Config
//    data object KalmanConfig {
//        //Q = how much we trust the sensor
//        @JvmField var Q: Double = 0.3
//        //R = how much we trust the linear regression
//        @JvmField var R: Double = 3.0
//        //N = number of elements we perform regression on
//        @JvmField var N: Int = 3
//        private var prevQ = Q
//        private var prevR = R
//        private var prevN = N
//        val hasChanged get() = prevQ != Q || prevR != R || prevN != N
//    }
//    private var filter = KalmanFilter(KalmanConfig.Q, KalmanConfig.R, KalmanConfig.N)
//    val position: Distance get() {
//        if (KalmanConfig.hasChanged) {
//            filter = KalmanFilter(KalmanConfig.Q, KalmanConfig.R, KalmanConfig.N)
//        }
//        val input = sensor.getDistance(DistanceUnit.MM)
//        val estimate = filter.estimate(input)
//        return estimate.mm
//    }
//    val rawPosition get() = sensor.getDistance(DistanceUnit.MM).mm
//}*/

// Include common definitions from above.
apply from: '../build.common.gradle'
apply from: '../build.dependencies.gradle'

android {
    namespace = 'org.firstinspires.ftc.teamcode'

    packagingOptions {
        jniLibs.useLegacyPackaging true
    }
}

repositories {
    maven {
        url = 'https://maven.brott.dev/'
    }
}

dependencies {
    implementation project(':FtcRobotController')
    annotationProcessor files('lib/OpModeAnnotationProcessor.jar')

    implementation 'org.openftc:easyopencv:1.7.0'
    implementation 'org.ftclib.ftclib:core:2.1.1'
    implementation "com.acmerobotics.roadrunner:ftc:0.1.8"
    implementation "com.acmerobotics.dashboard:dashboard:0.4.14"
}
